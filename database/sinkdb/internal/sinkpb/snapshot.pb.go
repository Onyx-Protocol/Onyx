// Code generated by protoc-gen-go.
// source: snapshot.proto
// DO NOT EDIT!

package sinkpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Snapshot struct {
	Version map[string]uint64 `protobuf:"bytes,1,rep,name=version" json:"version,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	State   map[string][]byte `protobuf:"bytes,2,rep,name=state" json:"state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Peers   map[uint64]string `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Snapshot) GetVersion() map[string]uint64 {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Snapshot) GetState() map[string][]byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Snapshot) GetPeers() map[uint64]string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*Snapshot)(nil), "sinkpb.Snapshot")
}

func init() { proto.RegisterFile("snapshot.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xce, 0x4b, 0x2c,
	0x28, 0xce, 0xc8, 0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0xce, 0xcc, 0xcb,
	0x2e, 0x48, 0x52, 0xba, 0xc9, 0xc4, 0xc5, 0x11, 0x0c, 0x95, 0x12, 0x32, 0xe7, 0x62, 0x2f, 0x4b,
	0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x93, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd5, 0x83, 0x28,
	0xd3, 0x83, 0x29, 0xd1, 0x0b, 0x83, 0xc8, 0xbb, 0xe6, 0x95, 0x14, 0x55, 0x06, 0xc1, 0x54, 0x0b,
	0x19, 0x72, 0xb1, 0x16, 0x97, 0x24, 0x96, 0xa4, 0x4a, 0x30, 0x81, 0xb5, 0x49, 0x63, 0x68, 0x0b,
	0x06, 0xc9, 0x42, 0x34, 0x41, 0x54, 0x82, 0xb4, 0x14, 0xa4, 0xa6, 0x16, 0x15, 0x4b, 0x30, 0xe3,
	0xd0, 0x12, 0x00, 0x92, 0x85, 0x6a, 0x01, 0xab, 0x94, 0xb2, 0xe2, 0xe2, 0x41, 0xb6, 0x5e, 0x48,
	0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x52, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x14, 0x12,
	0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x05, 0xb9, 0x83, 0x51, 0x83, 0x25, 0x08, 0xc2, 0xb1, 0x62,
	0xb2, 0x60, 0x94, 0xb2, 0xe0, 0xe2, 0x42, 0xb8, 0x81, 0x90, 0x4e, 0x1e, 0x34, 0x9d, 0x08, 0xa7,
	0x20, 0xeb, 0x64, 0xc1, 0xa2, 0x93, 0x13, 0x49, 0x67, 0x12, 0x1b, 0x38, 0xa8, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc0, 0x2b, 0x23, 0xf5, 0x7c, 0x01, 0x00, 0x00,
}
