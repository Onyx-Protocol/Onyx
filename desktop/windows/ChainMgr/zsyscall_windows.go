// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modadvapi32 = windows.NewLazySystemDLL("advapi32.dll")

	procAdjustTokenPrivileges = modadvapi32.NewProc("AdjustTokenPrivileges")
	procAdjustTokenGroups     = modadvapi32.NewProc("AdjustTokenGroups")
)

func AdjustTokenPrivileges(t syscall.Token, disableAllPrivs bool, newState unsafe.Pointer, newStateLen uint32, oldState unsafe.Pointer, oldStateLen uint32) (err error) {
	var _p0 uint32
	if disableAllPrivs {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := syscall.Syscall6(procAdjustTokenPrivileges.Addr(), 6, uintptr(t), uintptr(_p0), uintptr(newState), uintptr(newStateLen), uintptr(oldState), uintptr(oldStateLen))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func AdjustTokenGroups(t syscall.Token, resetToDefault bool, newState *tokenGroups, newStateLen uint32, oldState unsafe.Pointer, oldStateLen uint32) (err error) {
	var _p0 uint32
	if resetToDefault {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := syscall.Syscall6(procAdjustTokenGroups.Addr(), 6, uintptr(t), uintptr(_p0), uintptr(unsafe.Pointer(newState)), uintptr(newStateLen), uintptr(oldState), uintptr(oldStateLen))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
